1.
que1:-
step1:- suppose three developer create their feature branch as they wanted to change in the main branch. so to cretae a feature branch :-
git branch featureb1
git branch featureb2
git branch featureb2
these feture branch create by three different developer
step2:- to add file on these branch we have
git add .
git add filename
step3:-now to commit the changes in file :-
git commit -m"message"
step4:- to push the file to the feature branch :-
git push origin branch_main
step5:-now developers merge their feature branches to the main branch so first they checkout to the main branch then merge their feature branches to it. 
git checkout main_branch
git merge feature_branchname





2. 1.to create a new branch git branch branch_name
   2.make a new files named with index.html and add these file in branch
        git add index.html
   3.to make the snapshot of your files commit these changes in  staging area 
       git commit -m "add branch_name"
   4.to upload fles on remote repositry push command 
        git push orgin branch_name
   5. to merge with main branch
       git branch main
      git checkout main
      git merge branch_name
3.  que3:-
step1:- to create a git repository in hub 
 go to github and login your account 
step2:- on right side corner click on "+" to add new repository in the hub.
step3:- enter the name of repository 
step4:- add description if necessary as it is optional.
step5:- now click on create repository
now to clone your repository to the the system following commands are run on terminal.
step6:- git clone "linkof the repossitory"
step7:- now we have file and you want to change in it then do the changes.
step8:- now, to add the file use
git add file_name
step9:- to make snapshot of your files commit these changes in staging area
git commit -m"message"
step10:- to push the file in remote repository
git push origin main

4.# Check the commit history
git log --oneline

# Remove the sensitive file from the commit
git filter-branch --index-filter "git rm --cached --ignore-unmatch path/to/sensitive-file" HEAD

# Force push to update the remote repository
git push origin main --force

# Add the sensitive file to .gitignore
echo "path/to/sensitive-file" >> .gitignore

# Commit and push the changes to update .gitignore
git add .gitignore
git commit -m "Update .gitignore to exclude sensitive file"
git push origin main

